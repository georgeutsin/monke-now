(()=>{"use strict";var t={221:(t,r,a)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Calculator=void 0;const e=a(699),n=a(882),s=a(25);class i{constructor(t){this.dealt=new e.CardGroup,this.name=t,this.bestHand={handRank:e.HandRanks.highCard,hand:new e.CardGroup}}evaluate(t){const r=new e.CardGroup(this.dealt.cards.concat(t.cards));return this.bestHand=(0,s.evaluate)(r),this.bestHand}compare(t){if(t.bestHand.handRank===this.bestHand.handRank){for(let r=0;r<this.bestHand.hand.cards.length;r++)if(t.bestHand.hand.cards[r].rank!==this.bestHand.hand.cards[r].rank)return t.bestHand.hand.cards[r].rank>this.bestHand.hand.cards[r].rank?1:-1;return 0}return t.bestHand.handRank>this.bestHand.handRank?1:-1}}class d{constructor(t){this.players=[],this.input=t,this.board=new e.CardGroup,this.deck=new e.Deck(this.input.numDecks||1),this.deck.shuffle(),this.buildKnownBoard(),this.dealKnownCards(),this.buildRestOfBoard(),this.dealRestOfCards()}static getNpcName(t){return`NPC ${t}`}play(){for(const t of this.players)t.evaluate(this.board);(0,n.shuffle)(this.players),this.players.sort(((t,r)=>t.compare(r)));const t=[this.players[0]];for(let r=1;r<this.players.length&&0===this.players[r-1].compare(this.players[r]);r++)t.push(this.players[r]);return t}buildKnownBoard(){this.board=new e.CardGroup(this.input.board),this.board.cards.forEach((t=>this.deck.removeCard(t)))}buildRestOfBoard(){const t=this.board.cards.length;for(let r=0;r<this.input.boardSize-t;r++)this.board.addCards(this.deck.pop())}dealKnownCards(){for(const t of this.input.hands||[]){const r=new e.CardGroup(t);r.cards.forEach((t=>this.deck.removeCard(t)));const a=new i(r.toString());a.dealt.addCardGroup(r),this.players.push(a)}}dealRestOfCards(){var t;for(const t of this.players)for(let r=0;r<this.input.handSize-t.dealt.cards.length;r++)t.dealt.addCards(this.deck.pop());for(let r=0;r<this.input.numPlayers-(null===(t=this.input.hands)||void 0===t?void 0:t.length);r++){const t=new e.CardGroup;for(let r=0;r<this.input.handSize;r++)t.addCards(this.deck.pop());const a=new i(d.getNpcName(r+1));a.dealt.addCardGroup(t),this.players.push(a)}}}r.Calculator=class{constructor(t){var r;this.stats={},(0,n.validateInput)(t),(0,n.cleanInput)(t),this.input=t;for(const t of this.input.hands||[])this.setupStatsObj(t);for(let t=0;t<this.input.numPlayers-(null===(r=this.input.hands)||void 0===r?void 0:r.length);t++)this.setupStatsObj(d.getNpcName(t+1))}simulate(){for(let t=0;t<this.input.iterations;t++){const t=new d(this.input).play();this.addToCount(t)}return this.calculateStats(),this.stats}addToCount(t){if(t.length>1)for(const r of t)this.stats[r.name].tieCount++,this.input.returnTieHandStats&&this.stats[r.name].tieHandStats[e.HandRanks[r.bestHand.handRank]].count++;else for(const r of t)this.stats[r.name].winCount++,this.input.returnHandStats&&this.stats[r.name].handStats[e.HandRanks[r.bestHand.handRank]].count++}calculateStats(){for(const t in this.stats){if(this.stats[t].winPercent=this.calculatePercent(this.stats[t].winCount),this.stats[t].tiePercent=this.calculatePercent(this.stats[t].tieCount),this.input.returnHandStats)for(const r in this.stats[t].handStats)this.stats[t].handStats[r].percent=this.calculatePercent(this.stats[t].handStats[r].count);if(this.input.returnTieHandStats)for(const r in this.stats[t].tieHandStats)this.stats[t].tieHandStats[r].percent=this.calculatePercent(this.stats[t].tieHandStats[r].count)}}setupStatsObj(t){this.stats[t]={winCount:0,tieCount:0},this.input.returnHandStats&&(this.stats[t].handStats={}),this.input.returnTieHandStats&&(this.stats[t].tieHandStats={});for(const r in e.HandRanks)"number"==typeof e.HandRanks[r]&&(this.input.returnHandStats&&(this.stats[t].handStats[r]={count:0}),this.input.returnTieHandStats&&(this.stats[t].tieHandStats[r]={count:0}))}calculatePercent(t){return+(t/this.input.iterations*100).toFixed(4)}}},90:(t,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.getTableCards=r.getHandCards=r.getNumPlayersIn=r.getCurrentPlayerBet=r.getTableBetsList=void 0,r.getTableBetsList=()=>jQuery(".table-player p.table-player-bet-value").toArray().map((t=>parseFloat(t.innerText.replace(/check/i,"0")))),r.getCurrentPlayerBet=()=>{var t=jQuery(".decision-current").first().find("p.table-player-bet-value");return 0+(t&&parseFloat(t.text().replace(/check/i,"0")||"0"))},r.getNumPlayersIn=()=>{var t=jQuery(".table-player").toArray(),r=jQuery(".table-player .fold").toArray();return t.length-r.length},r.getHandCards=()=>a(jQuery(".you-player")),r.getTableCards=()=>a(jQuery(".table-cards"));var a=t=>{var r=[];return $(t).find(".card").each(((t,a)=>{var e=$(a).find(".value").text();"10"==e&&(e="T");var n=$(a).find(".sub-suit").text();r.push(e+n)})),r}},25:(t,r,a)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.evaluate=void 0;const e=a(699),n=a(882);r.evaluate=function(t){t.sortDesc();const r=t.countBy("rank"),a=[],s=[],i=[];let d=0,o=-1,u=-1;const h=Object.keys(r).reverse();for(const t of h)2===r[t]?i.push(Number(t)):3===r[t]?s.push(Number(t)):4===r[t]&&a.push(Number(t)),d<5&&(u&&u-1===Number(t)?(d++,u=Number(t)):(o=u=Number(t),d=1));const c=t.countBy("suit");let l=null;for(const t in c)if(c[t]>=5){l=Number(t);break}if(l)if(5===d){const r=t.cards.filter((t=>t.suit===l&&t.rank<=o));if(r.length>=5){let t=0,a=1,n=!1;for(let e=1;e<r.length;e++)if(r[e].rank!==r[e-1].rank-1?(t=e,a=1):a++,5===a){n=!0;break}if(n)return{handRank:e.HandRanks.straightFlush,hand:new e.CardGroup(r.slice(t,t+5))}}}else if(4===d&&o===e.Ranks.five){const r=t.cards.filter((t=>t.suit===l&&t.rank===e.Ranks.ace));if(r.length>0){const a=t.cards.filter((t=>t.suit===l&&t.rank<=o));if(4===a.length)return{handRank:e.HandRanks.straightFlush,hand:new e.CardGroup(a.concat(r[0]).slice(0,5))}}}if(a.length>=1){const r=t.cards.filter((t=>t.rank===a[0])),n=t.cards.filter((t=>t.rank!==a[0]));return{handRank:e.HandRanks.quads,hand:new e.CardGroup(r.concat(n).slice(0,5))}}if(1===s.length&&i.length>=1){const r=t.cards.filter((t=>t.rank===s[0])),a=t.cards.filter((t=>t.rank===i[0]));return{handRank:e.HandRanks.fullHouse,hand:new e.CardGroup(r.concat(a))}}if(s.length>1){const r=t.cards.filter((t=>t.rank===s[0])),a=t.cards.filter((t=>t.rank===s[1]));return{handRank:e.HandRanks.fullHouse,hand:new e.CardGroup(r.concat(a.slice(0,2)))}}if(l){const r=t.cards.filter((t=>t.suit===l));return{handRank:e.HandRanks.flush,hand:new e.CardGroup(r.slice(0,5))}}if(5===d){const r=(0,n.uniqWith)(t.cards.filter((t=>t.rank<=o)),((t,r)=>t.rank===r.rank));return{handRank:e.HandRanks.straight,hand:new e.CardGroup(r.slice(0,5))}}if(4===d&&o===e.Ranks.five){const r=t.cards.filter((t=>t.rank===e.Ranks.ace));if(r.length>0){const a=(0,n.uniqWith)(t.cards.filter((t=>t.rank<=o)),((t,r)=>t.rank===r.rank));return{handRank:e.HandRanks.straight,hand:new e.CardGroup(a.concat(r[0]).slice(0,5))}}}if(1===s.length){const r=t.cards.filter((t=>t.rank===s[0])),a=t.cards.filter((t=>t.rank!==s[0]));return{handRank:e.HandRanks.trips,hand:new e.CardGroup(r.concat(a).slice(0,5))}}if(i.length>=2){const r=t.cards.filter((t=>t.rank===i[0])),a=t.cards.filter((t=>t.rank===i[1])),n=t.cards.filter((t=>t.rank!==i[0]&&t.rank!==i[1]));return{handRank:e.HandRanks.twoPair,hand:new e.CardGroup(r.concat(a).concat(n).slice(0,5))}}if(1===i.length){const r=t.cards.filter((t=>t.rank===i[0])),a=t.cards.filter((t=>t.rank!==i[0]));return{handRank:e.HandRanks.pair,hand:new e.CardGroup(r.concat(a).slice(0,5))}}return{handRank:e.HandRanks.highCard,hand:new e.CardGroup(t.cards.slice(0,5))}}},699:(t,r,a)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.Deck=r.CardGroup=r.Card=r.HandRanks=r.Ranks=r.Suits=void 0;const e=a(882);var n,s,i;!function(t){t[t.club=1]="club",t[t.diamond=2]="diamond",t[t.heart=3]="heart",t[t.spade=4]="spade"}(n=r.Suits||(r.Suits={})),function(t){t[t.two=2]="two",t[t.three=3]="three",t[t.four=4]="four",t[t.five=5]="five",t[t.six=6]="six",t[t.seven=7]="seven",t[t.eight=8]="eight",t[t.nine=9]="nine",t[t.ten=10]="ten",t[t.jack=11]="jack",t[t.queen=12]="queen",t[t.king=13]="king",t[t.ace=14]="ace"}(s=r.Ranks||(r.Ranks={})),(i=r.HandRanks||(r.HandRanks={}))[i.highCard=1]="highCard",i[i.pair=2]="pair",i[i.twoPair=3]="twoPair",i[i.trips=4]="trips",i[i.straight=5]="straight",i[i.flush=6]="flush",i[i.fullHouse=7]="fullHouse",i[i.quads=8]="quads",i[i.straightFlush=9]="straightFlush";class d{static fromString(t){switch(t){case"c":return n.club;case"d":return n.diamond;case"h":return n.heart;case"s":return n.spade;default:throw new Error(`Invalid card suit string: ${t}`)}}static toString(t){if(!(t in n))throw new Error(`Invalid suit value: ${t}`);return n[t][0]}static toLongName(t,r){if(!(t in n))throw new Error(`Invalid suit value: ${t}`);let a=n[t];return r&&(a+="s"),a}}class o{static fromString(t){switch(t){case"T":return s.ten;case"J":return s.jack;case"Q":return s.queen;case"K":return s.king;case"A":return s.ace;default:const r=Number(t);if(isNaN(r)||r<s.two||r>s.nine)throw new Error(`Invalid card rank string: ${t}`);return r}}static toString(t){switch(t){case s.ten:return"T";case s.jack:return"J";case s.queen:return"Q";case s.king:return"K";case s.ace:return"A";default:if(isNaN(t)||t<s.two||t>s.ace)throw new Error(`Invalid card rank value: ${t}`);return t.toString()}}static toLongName(t){if(!(t in s))throw new Error(`Invalid rank value: ${t}`);return s[t]}}class u{constructor(t){u.validateCardString(t),this._rank=o.fromString(t[0]),this._suit=d.fromString(t[1])}get rank(){return this._rank}get suit(){return this._suit}static validateCardString(t){if(2!==t.length)throw new Error(`Card string must have a length of 2. Invalid: ${t}`);if(!["T","J","Q","K","A"].includes(t[0])&&(+t[0]<2||+t[0]>9))throw new Error(`Card string must begin with 2-9, T, J, Q, K, or A. Invalid: ${t}`);if(!["c","d","h","s"].includes(t[1]))throw new Error(`Card string must end with c, d, h, or s. Invalid: ${t}`)}equals(t){return this._rank===t.rank&&this._suit===t.suit}toString(){return o.toString(this._rank)+d.toString(this._suit)}toLongName(){return`${o.toLongName(this._rank)} of ${d.toLongName(this._suit,!0)}`}}r.Card=u;class h{constructor(t){this._cards=[],t&&(Array.isArray(t),this.addCards(t))}get cards(){return this._cards}static validateCardGroupString(t){for(const r of t.split(","))u.validateCardString(r)}toString(){return this._cards.map((t=>t.toString())).join(",")}addCardGroup(t){this._cards.push(...t.cards)}addCards(t){"string"==typeof t?this.addCardsString(t):Array.isArray(t)?this._cards.push(...t):this._cards.push(t)}sortDesc(){this._cards.sort(((t,r)=>r.suit-t.suit)),this._cards.sort(((t,r)=>r.rank-t.rank))}countBy(t){const r={};for(const a of this._cards){const e="rank"===t?a.rank:a.suit;e in r?r[e]++:r[e]=1}return r}addCardsString(t){for(const r of t.split(",")){const t=new u(r);this.addCards(t)}}}r.CardGroup=h,r.Deck=class extends h{constructor(t){super(Array(t).fill("2c,2d,2h,2s,3c,3d,3h,3s,4c,4d,4h,4s,5c,5d,5h,5s,6c,6d,6h,6s,7c,7d,7h,7s,8c,8d,8h,8s,9c,9d,9h,9s,Tc,Td,Th,Ts,Jc,Jd,Jh,Js,Qc,Qd,Qh,Qs,Kc,Kd,Kh,Ks,Ac,Ad,Ah,As").join(","))}pop(){if(0===this._cards.length)throw new Error("Deck is empty. There are either too many players, or the boardSize is too large");return this._cards.pop()||new u("As")}removeCard(t){let r=!1;for(let a=0;a<this._cards.length;a++)this._cards[a].equals(t)&&(this._cards.splice(a,1),r=!0);if(!r)throw new Error(`CardGroup does not contain card string: ${t.toString()}`);return t}shuffle(){(0,e.shuffle)(this._cards)}}},882:(t,r,a)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.shuffle=r.uniqWith=r.cleanInput=r.validateInput=void 0;const e=a(699);r.validateInput=function(t){if(!("numPlayers"in t)&&!("hands"in t))throw new Error('Either "numPlayers" or "hands" must be provided.');if("returnHandStats"in t&&"boolean"!=typeof t.returnHandStats)throw new Error(`"returnHandStats" must be a boolean. Invalid: ${t.returnHandStats}`);if("returnTieHandStats"in t&&"boolean"!=typeof t.returnTieHandStats)throw new Error(`"returnTieHandStats" must be a boolean. Invalid: ${t.returnTieHandStats}`);if("numPlayers"in t){if("number"!=typeof t.numPlayers||!Number.isSafeInteger(t.numPlayers)||t.numPlayers<1)throw new Error(`"numPlayers" must be an integer greater than 0. Invalid: ${t.numPlayers}`);if(t.hands&&t.numPlayers<t.hands.length)throw new Error(`"numPlayers" must be equal to or greater than number of hands. Invalid: ${t.numPlayers} | ${t.hands}`)}if("boardSize"in t&&("number"!=typeof t.boardSize||!Number.isSafeInteger(t.boardSize)||t.boardSize<0))throw new Error(`"boardSize" must be a positive integer. Invalid: ${t.boardSize}`);if("numDecks"in t&&("number"!=typeof t.numDecks||!Number.isSafeInteger(t.numDecks)||t.numDecks<1))throw new Error(`"numDecks" must be an integer greater than 0. Invalid: ${t.numDecks}`);if("board"in t){if("string"!=typeof t.board)throw new Error(`"board" must be a string. Invalid: ${t.board}`);const r=new e.CardGroup(t.board);if("boardSize"in t){if(r.cards.length>(t.boardSize||0))throw new Error(`"board" cannot contain more than "boardSize" numer of cards. Invalid: ${t.board} on boardSize ${t.boardSize}`)}else if(r.cards.length>5)throw new Error(`"board" cannot contain more than 5 cards. Invalid: ${t.board}`)}if("iterations"in t&&("number"!=typeof t.iterations||!Number.isSafeInteger(t.iterations)||t.iterations<1))throw new Error(`"iterations" must be a string. Invalid: ${t.iterations}`);if("handSize"in t&&("number"!=typeof t.handSize||!Number.isSafeInteger(t.handSize)||t.handSize<0))throw new Error(`"handSize" must be a positive integer. Invalid: ${t.handSize}`);if("hands"in t){if(!Array.isArray(t.hands))throw new Error(`"hands" must be an array of strings like ["5c,Th"]. Invalid: ${t.hands}`);for(const r of t.hands){const a=new e.CardGroup(r);if("handSize"in t){if(a.cards.length>(t.handSize||0))throw new Error(`Each hand must specify at most ${t.handSize} cards. Invalid ${r}`)}else if(a.cards.length>2)throw new Error(`Each hand must specify at most 2 cards. Invalid ${r}`)}}const r=[];if(t.hands&&t.hands.forEach((t=>r.push(...t.split(",")))),t.board&&r.push(...t.board.split(",")),new Set(r).size!==r.length)throw new Error(`Input cards must be unique. Invalid: ${r}`)},r.cleanInput=function(t){t.hands||(t.hands=[]),0===t.numPlayers||t.numPlayers||(t.numPlayers=t.hands.length),t.board||(t.board=""),0===t.boardSize||t.boardSize||(t.boardSize=5),t.numDecks||(t.numDecks=1),t.iterations||(t.iterations=1e3),t.handSize||(t.handSize=2)},r.uniqWith=function(t,r){const a=[];for(const e of t)-1===a.findIndex((t=>r(e,t)))&&a.push(e);return a},r.shuffle=function(t){for(let r=t.length-1;r>0;r--){const a=Math.floor(Math.random()*(r+1));[t[r],t[a]]=[t[a],t[r]]}}}},r={};function a(e){var n=r[e];if(void 0!==n)return n.exports;var s=r[e]={exports:{}};return t[e](s,s.exports,a),s.exports}(()=>{const t=a(90),r=a(221);var e=setInterval((()=>{"complete"===document.readyState&&(clearInterval(e),console.log("Beginning inject.js..."),setTimeout((()=>{n()}),1e3))}),10),n=()=>{var t="<div class='pot-odds-container'>Pot odds:&nbsp;<span class='pot-odds-value'>&mdash;</span></div>";jQuery(".table").prepend(jQuery(t)),t="<div class='prob-container'><span class='prob-value'>&mdash;</span></div>",jQuery(".table").prepend(jQuery(t)),t="<div class='out-container'><span class='out-value'><table>\n    <tr>\n      <th>Hand</th>\n      <th>Player</th>\n      <th>Opp.</th>\n    </tr>\n  </table></span></div>",jQuery(".table").prepend(jQuery(t));var r=jQuery(".table")[0];new MutationObserver(((t,r)=>{for(var a of t)if(a.target.getAttribute&&a.target.getAttribute("class")){var e=a.target.getAttribute("class");e&&e.match(/decision\-current|flipped/)&&s()}})).observe(r,{characterData:!0,attributes:!0,childList:!0,subtree:!0}),console.log("...setup done.")},s=()=>{i(),d()},i=()=>{jQuery(".pot-odds-value").html("&mdash;");var r=parseInt(jQuery(".table-pot-size").text()),a=(0,t.getTableBetsList)(),e=a.reduce(((t,r)=>t+r),0),n=Math.max(...a),s=(0,t.getCurrentPlayerBet)();if(n>0&&n>s){var i=r+e,d=n-s,o=Math.round(d/(i+d)*100)+"%";console.log("Updated pot odds: ",o),jQuery(".pot-odds-value").html(o)}},d=()=>{let r=(0,t.getHandCards)().join(",");const a={hands:[r],numPlayers:(0,t.getNumPlayersIn)(),board:(0,t.getTableCards)().join(","),returnHandStats:!0,returnTieHandStats:!0,iterations:1e5},e=u(a);jQuery(".prob-value").html(h(e,r)),jQuery(".out-value").html(c(e,r))},o={},u=t=>{let a=(t=>t.hands.join()+t.numPlayers+t.board)(t);if(a in o)return console.log("Using cache",a,o[a]),o[a];const e=new r.Calculator(t).simulate();return console.log(e),o[a]=e,e},h=(t,r)=>{var a="Player: ";return(a+=t[r].winPercent+"% (T "+t[r].tiePercent+"%)")+"<br/>Opp: "+t["NPC 1"].winPercent+"% (T "+t["NPC 1"].tiePercent+"%)"},c=(t,r)=>{var a={highCard:"HC",pair:"P",twoPair:"2P",trips:"3OAK",straight:"STR",flush:"FL",fullHouse:"FH",quads:"4OAK",straightFlush:"SF"};let e="";for(var n of["highCard","pair","twoPair","trips","straight","flush","fullHouse","quads","straightFlush"]){const s=a[n],i=t[r].handStats[n].percent,d=t["NPC 1"].handStats[n].percent;e+=`\n        <tr>\n            <td>${s}</td>\n            <td ${Math.abs(i-d)>.01?`style="color:${i>d?"limegreen":"red"}"`:""}>${i}</td>\n            <td>${d}</td>\n        </tr>`}return`\n    <table>\n    <tr>\n        <th>Hand</th>\n        <th>Player</th>\n        <th>Opp.</th>\n    </tr>\n    ${e}\n    </table>\n`}})()})();